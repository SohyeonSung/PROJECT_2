<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="model.dao.StudyGroupMapper">

	<!-- 전체 스터디 그룹 조회 (종료 상태 포함) -->
	<select id="getAllStudyGroups"
		resultType="model.dto.StudyGroupDTO">
		SELECT
		GROUP_ID AS groupId,
		NAME AS name,
		LEADER_ID AS
		leaderId,
		CREATED_AT AS createdAt,
		DURATION AS duration,
		DESCRIPTION AS
		description,
		MAX_MEMBER AS maxMember,
		TO_CHAR(CREATED_AT + DURATION) AS
		endDate,
		CASE
		WHEN (CREATED_AT + DURATION) &lt; SYSDATE THEN '종료됨'
		ELSE
		'모집 중'
		END AS status
		FROM STUDY_GROUP
		ORDER BY GROUP_ID DESC
	</select>


	<select id="searchGroups" parameterType="string" resultType="model.dto.StudyGroupDTO">
    SELECT *
    FROM STUDY_GROUP
    WHERE LOWER(NAME) LIKE LOWER(#{keyword})
       OR LOWER(DESCRIPTION) LIKE LOWER(#{keyword})
       OR LOWER(LEADER_ID) LIKE LOWER(#{keyword})
    ORDER BY GROUP_ID DESC
</select>
	

	<!-- 전체 스터디 그룹 조회 (간단 조회) -->
	<select id="selectAllStudyGroups"
		resultType="model.dto.StudyGroupDTO">
		SELECT * FROM STUDY_GROUP
	</select>

	<!-- 그룹 상세 조회 -->
	<select id="getGroupById" parameterType="int"
		resultType="model.dto.StudyGroupDTO">

		SELECT
		GROUP_ID AS groupId,
		NAME AS name,
		LEADER_ID AS
		leaderId,
		TO_CHAR(CREATED_AT, 'YYYY-MM-DD') AS createdAt,
		DURATION AS
		duration,
		DESCRIPTION AS description,
		MAX_MEMBER AS maxMember
		FROM
		STUDY_GROUP
		WHERE GROUP_ID = #{groupId}
	</select>

	<!-- 그룹 상세 조회 (간단) -->
	<select id="selectStudyGroupById" parameterType="int"
		resultType="model.dto.StudyGroupDTO">
		SELECT * FROM STUDY_GROUP WHERE GROUP_ID = #{groupId}
	</select>

	<!-- 그룹 생성 (시퀀스 사용) -->
	<insert id="insertStudyGroup"
		parameterType="model.dto.StudyGroupDTO">
		INSERT INTO STUDY_GROUP (
		GROUP_ID, NAME, LEADER_ID,
		CREATED_AT, DURATION, DESCRIPTION, MAX_MEMBER
		) VALUES (
		STUDY_GROUP_SEQ.NEXTVAL,
		#{name}, #{leaderId}, SYSDATE, #{duration},
		#{description}, #{maxMember}
		)
	</insert>

	<!-- 그룹 생성 (수동 GROUP_ID 입력용, 간단) -->
	<insert id="insertStudyGroupManual"
		parameterType="model.dto.StudyGroupDTO">
		INSERT INTO STUDY_GROUP (GROUP_ID, NAME, LEADER_ID,
		CREATED_AT, DURATION)
		VALUES (#{groupId}, #{name}, #{leaderId},
		SYSDATE, #{duration})
	</insert>

	<!-- 그룹 정보 수정 -->
	<update id="updateGroup" parameterType="model.dto.StudyGroupDTO">
		UPDATE STUDY_GROUP
		SET
		NAME = #{name},
		LEADER_ID = #{leaderId},
		DURATION = #{duration},
		DESCRIPTION = #{description}
		WHERE GROUP_ID = #{groupId}
	</update>

	<!-- 그룹 정보 수정 (간단) -->
	<update id="updateStudyGroup"
		parameterType="model.dto.StudyGroupDTO">
		UPDATE STUDY_GROUP
		SET NAME = #{name}, DURATION =
		#{duration}
		WHERE GROUP_ID = #{groupId}
	</update>

	<!-- 그룹 기간만 수정 -->
	<update id="updateDuration"
		parameterType="model.dto.StudyGroupDTO">
		UPDATE STUDY_GROUP
		SET DURATION = #{duration}
		WHERE
		GROUP_ID = #{groupId}
	</update>

	<!-- 내가 만든 스터디 목록 -->
<select id="selectGroupsLedByUser" parameterType="string" resultType="model.dto.StudyGroupDTO">
  SELECT
    GROUP_ID AS groupId,
    NAME AS name,
    LEADER_ID AS leaderId,
    CREATED_AT AS createdAt,
    DURATION AS duration,
    DESCRIPTION AS description,
    MAX_MEMBER AS maxMember
  FROM STUDY_GROUP
  WHERE LEADER_ID = #{userId}
  ORDER BY GROUP_ID DESC
</select>


	<!-- 내가 가입한 스터디 목록 -->
	<select id="selectGroupsByUserId" parameterType="string"
		resultType="model.dto.StudyMemberDTO">
		SELECT
		GROUP_ID AS groupId,
		USER_ID AS userId,
		JOIN_DATE AS
		joinedAt
		FROM STUDY_MEMBER
		WHERE USER_ID = #{userId}
	</select>

	<!-- 내가 가입한 스터디 상세 -->
<select id="selectGroupsJoinedByUser" resultType="model.dto.StudyGroupDTO">
	SELECT
		G.GROUP_ID AS groupId,
		G.NAME AS name,
		G.LEADER_ID AS leaderId,
		G.CREATED_AT AS createdAt,
		G.DURATION AS duration,
		G.DESCRIPTION AS description,
		G.MAX_MEMBER AS maxMember
	FROM
		STUDY_GROUP G
	JOIN STUDY_MEMBER M ON G.GROUP_ID = M.GROUP_ID
	WHERE
		M.USER_ID = #{userId}
</select>


	<!-- 특정 그룹의 전체 멤버 -->
	<select id="selectMembersByGroupId" parameterType="int"
		resultType="model.dto.StudyMemberDTO">
		SELECT
		GROUP_ID AS groupId,
		USER_ID AS userId,
		JOIN_DATE AS
		joinedAt
		FROM STUDY_MEMBER
		WHERE GROUP_ID = #{groupId}
	</select>

	<!-- 특정 그룹의 특정 유저 -->
	<select id="selectMember" parameterType="map"
		resultType="model.dto.StudyMemberDTO">
		SELECT
		GROUP_ID AS groupId,
		USER_ID AS userId,
		JOIN_DATE AS
		joinedAt
		FROM STUDY_MEMBER
		WHERE GROUP_ID = #{groupId} AND USER_ID =
		#{userId}
	</select>

	<!-- 스터디 참여 -->
	<insert id="insertMember"
		parameterType="model.dto.StudyMemberDTO">
		INSERT INTO STUDY_MEMBER (GROUP_ID, USER_ID, JOIN_DATE)
		VALUES (#{groupId}, #{userId}, SYSDATE)
	</insert>

	<!-- 스터디 탈퇴 -->
	<delete id="leaveGroup">
		DELETE FROM STUDY_MEMBER WHERE GROUP_ID = #{groupId}
		AND USER_ID = #{userId}
	</delete>


	<!-- 강제탈퇴 -->
	<delete id="kickMember" parameterType="map">
		DELETE FROM STUDY_MEMBER
		WHERE GROUP_ID = #{groupId} AND USER_ID = #{userId}
	</delete>

	<!-- 그룹 삭제 -->
	<delete id="deleteGroup" parameterType="int">
		DELETE FROM STUDY_GROUP
		WHERE GROUP_ID = #{groupId}
	</delete>

	<!-- 그룹 삭제 (간단) -->
	<delete id="deleteStudyGroup" parameterType="int">
		DELETE FROM
		STUDY_GROUP WHERE GROUP_ID = #{groupId}
	</delete>


	<!-- 그룹장이 그룹삭제 -->
	<delete id="deleteGroupByLeader" parameterType="map">
		DELETE FROM STUDY_GROUP
		WHERE GROUP_ID = #{groupId}
		AND LEADER_ID = #{leaderId}
	</delete>



	<!-- 그룹 단일 조회 (createdAt + endDate 포함) -->
	<select id="getStudyGroupById" parameterType="int"
		resultType="model.dto.StudyGroupDTO">
		SELECT
		GROUP_ID AS groupId,
		NAME AS name,
		LEADER_ID AS
		leaderId,
		TO_CHAR(CREATED_AT, 'YYYY-MM-DD') AS createdAt,
		DURATION AS
		duration,
		DESCRIPTION AS description,
		MAX_MEMBER AS maxMember,
		TO_CHAR(CREATED_AT + DURATION) AS endDate
		FROM STUDY_GROUP
		WHERE
		GROUP_ID = #{groupId}
	</select>

	<!-- 현재 그룹 인원 수 -->
	<select id="countMembers" resultType="int" parameterType="int">
		SELECT
		COUNT(*) FROM STUDY_MEMBER WHERE GROUP_ID = #{groupId}
	</select>

	<insert id="insertNotice" parameterType="model.dto.StudyNoticeDTO">
 		 INSERT INTO STUDY_NOTICE (
   		 NOTICE_ID, GROUP_ID, TITLE, CONTENT, LOCATION, CREATED_BY
  			) VALUES (
   		 STUDY_NOTICE_SEQ.NEXTVAL,
   		 #{groupId}, #{title}, #{content}, #{location}, #{createdBy}
  		)
	</insert>
	
	<select id="getNotices" parameterType="int" resultType="model.dto.StudyNoticeDTO">
  		SELECT
    	NOTICE_ID AS noticeId,
    	GROUP_ID AS groupId,
    	TITLE AS title,
    	CONTENT AS content,
    	LOCATION AS location,
    	CREATED_AT AS createdAt,
    	CREATED_BY AS createdBy
  		FROM STUDY_NOTICE
  		WHERE GROUP_ID = #{groupId}
  		ORDER BY CREATED_AT DESC
	</select>
	
	
	<select id="getNoticeById" parameterType="int" resultType="model.dto.StudyNoticeDTO">
  		SELECT
   		NOTICE_ID AS noticeId,
    	GROUP_ID AS groupId,
    	TITLE AS title,
   		CONTENT AS content,
    	LOCATION AS location,
    	CREATED_AT AS createdAt,
    	CREATED_BY AS createdBy
  		FROM STUDY_NOTICE
  		WHERE NOTICE_ID = #{noticeId}
	</select>
	
	<!-- 댓글 등록 -->
<insert id="insertComment" parameterType="model.dto.StudyCommentDTO">
  INSERT INTO STUDY_COMMENT (
    COMMENT_ID, GROUP_ID, USER_ID, CONTENT
  ) VALUES (
    STUDY_COMMENT_SEQ.NEXTVAL, #{groupId}, #{userId}, #{content}
  )
</insert>

<!-- 댓글 목록 조회 -->
<select id="getComments" parameterType="int" resultType="model.dto.StudyCommentDTO">
  	SELECT
    COMMENT_ID AS commentId,
    GROUP_ID AS groupId,
    USER_ID AS userId,
    CONTENT AS content,
    CREATED_AT AS createdAt
 	 FROM STUDY_COMMENT
  	WHERE GROUP_ID = #{groupId}
  	ORDER BY CREATED_AT ASC
</select>


	<!-- 댓글 수정 -->
<update id="updateComment" parameterType="model.dto.StudyCommentDTO">
  UPDATE STUDY_COMMENT
  SET CONTENT = #{content}
  WHERE COMMENT_ID = #{commentId} AND USER_ID = #{userId}
</update>


<!-- 댓글 삭제 -->
<delete id="deleteComment" parameterType="model.dto.StudyCommentDTO">
  DELETE FROM STUDY_COMMENT
  WHERE COMMENT_ID = #{commentId} AND USER_ID = #{userId}
</delete>

<update id="updateNotice" parameterType="model.dto.StudyNoticeDTO">
  UPDATE STUDY_NOTICE
  SET TITLE = #{title}, CONTENT = #{content}, LOCATION = #{location}
  WHERE NOTICE_ID = #{noticeId} AND CREATED_BY = #{createdBy}
</update>

<delete id="deleteNotice" parameterType="model.dto.StudyNoticeDTO">
  DELETE FROM STUDY_NOTICE
  WHERE NOTICE_ID = #{noticeId} AND CREATED_BY = #{createdBy}
</delete>



</mapper>